// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using TrackerEnabledDbContext;

    // Users
    [Table("Users", Schema = "dbo")]
    [TrackChanges]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class User: Entity, IVersionable
    {
        // User

        [Column(@"FirstName", Order = 2, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (length: 50)

        [Column(@"LastName", Order = 3, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (length: 50)

        [Column(@"Email", Order = 4, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } // Email (length: 50)

        [Column(@"AuthUserId", Order = 5, TypeName = "int")]
        [Display(Name = "Auth user ID")]
        public int AuthUserId { get; set; } // AuthUserId

        [Column(@"ImageId", Order = 6, TypeName = "int")]
        [Display(Name = "Image ID")]
        public int? ImageId { get; set; } // ImageId

        [Column(@"AddressId", Order = 7, TypeName = "int")]
        [Display(Name = "Address ID")]
        public int? AddressId { get; set; } // AddressId

        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"Version", Order = 8, TypeName = "timestamp")]
        [MaxLength(8)]
        [Timestamp]
        [Display(Name = "Version")]
        public byte[] Version { get; set; } // Version (length: 8)

        // Reverse navigation

        /// <summary>
        /// Child Contracts where [Contracts].[UserId] point to this entity (FK_Contracts_Users)
        /// </summary>
        public System.Collections.Generic.ICollection<Contract> Contracts { get; set; } // Contracts.FK_Contracts_Users
        /// <summary>
        /// Child Documents (Many-to-Many) mapped by table [UserDocuments]
        /// </summary>
        public System.Collections.Generic.ICollection<Document> Documents { get; set; } // Many to many mapping
        /// <summary>
        /// Child Documents where [Documents].[UploadedBy] point to this entity (FK_Documents_Users)
        /// </summary>
        public System.Collections.Generic.ICollection<Document> Documents_UploadedBy { get; set; } // Documents.FK_Documents_Users
        /// <summary>
        /// Child ServiceAreas (Many-to-Many) mapped by table [UserServiceAreas]
        /// </summary>
        public System.Collections.Generic.ICollection<ServiceArea> ServiceAreas { get; set; } // Many to many mapping
        /// <summary>
        /// Child UserPhones where [UserPhones].[UserId] point to this entity (FK_UserPhones_Users)
        /// </summary>
        public System.Collections.Generic.ICollection<UserPhone> UserPhones { get; set; } // UserPhones.FK_UserPhones_Users

        // Foreign keys

        /// <summary>
        /// Parent Address pointed by [Users].([AddressId]) (FK_Users_Addresses)
        /// </summary>
        [ForeignKey("AddressId")] public Address Address { get; set; } // FK_Users_Addresses

        /// <summary>
        /// Parent AuthUser pointed by [Users].([AuthUserId]) (FK_Users_AuthUsers)
        /// </summary>
        [ForeignKey("AuthUserId")] public AuthUser AuthUser { get; set; } // FK_Users_AuthUsers

        /// <summary>
        /// Parent Image pointed by [Users].([ImageId]) (FK_Users_Images)
        /// </summary>
        [ForeignKey("ImageId")] public Image Image { get; set; } // FK_Users_Images

        public User()
        {
            UserPhones = new System.Collections.Generic.List<UserPhone>();
            Contracts = new System.Collections.Generic.List<Contract>();
            Documents_UploadedBy = new System.Collections.Generic.List<Document>();
            Documents = new System.Collections.Generic.List<Document>();
            ServiceAreas = new System.Collections.Generic.List<ServiceArea>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
