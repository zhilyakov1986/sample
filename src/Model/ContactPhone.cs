// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using TrackerEnabledDbContext;

    // ContactPhones
    [Table("ContactPhones", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class ContactPhone: BaseEntity
    {
        // ContactPhone
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ContactId", Order = 1, TypeName = "int")]
        [Index(@"PK_ContactPhones", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Contact ID")]
        public int ContactId { get; set; } // ContactId (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Phone", Order = 2, TypeName = "varchar")]
        [Index(@"PK_ContactPhones", 2, IsUnique = true, IsClustered = true)]
        [MaxLength(20)]
        [StringLength(20)]
        [Key]
        [Phone]
        [Display(Name = "Phone")]
        public string Phone { get; set; } // Phone (Primary key) (length: 20)

        [Column(@"Extension", Order = 3, TypeName = "varchar")]
        [MaxLength(5)]
        [StringLength(5)]
        [Display(Name = "Extension")]
        public string Extension { get; set; } // Extension (length: 5)

        [Column(@"PhoneTypeId", Order = 4, TypeName = "int")]
        [Display(Name = "Phone type ID")]
        public int PhoneTypeId { get; set; } // PhoneTypeId

        [Column(@"IsPrimary", Order = 5, TypeName = "bit")]
        [Display(Name = "Is primary")]
        public bool IsPrimary { get; set; } // IsPrimary

        // Foreign keys

        /// <summary>
        /// Parent Contact pointed by [ContactPhones].([ContactId]) (FK_ContactPhones_Contacts)
        /// </summary>
        [ForeignKey("ContactId")] public Contact Contact { get; set; } // FK_ContactPhones_Contacts

        /// <summary>
        /// Parent PhoneType pointed by [ContactPhones].([PhoneTypeId]) (FK_ContactPhones_PhoneTypes)
        /// </summary>
        [ForeignKey("PhoneTypeId")] public PhoneType PhoneType { get; set; } // FK_ContactPhones_PhoneTypes

        public ContactPhone()
        {
            Extension = "";
            IsPrimary = false;
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
