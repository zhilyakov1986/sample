// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using TrackerEnabledDbContext;

    // CustomerLocations
    [Table("CustomerLocations", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class CustomerLocation: Entity, IVersionable
    {
        // CustomerLocation

        [Column(@"Name", Order = 2, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        [Column(@"CustomerId", Order = 3, TypeName = "int")]
        [Display(Name = "Customer ID")]
        public int? CustomerId { get; set; } // CustomerId

        [Column(@"ServiceAreaId", Order = 4, TypeName = "int")]
        [Display(Name = "Service area ID")]
        public int ServiceAreaId { get; set; } // ServiceAreaId

        [Column(@"AddressId", Order = 5, TypeName = "int")]
        [Display(Name = "Address ID")]
        public int? AddressId { get; set; } // AddressId

        [Column(@"Archived", Order = 6, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"Version", Order = 7, TypeName = "timestamp")]
        [MaxLength(8)]
        [Timestamp]
        [Display(Name = "Version")]
        public byte[] Version { get; set; } // Version (length: 8)

        // Reverse navigation

        /// <summary>
        /// Child CustomerLocationAddresses where [CustomerLocationAddresses].[CustomerLocationId] point to this entity (FK_CustomerLocationAddresses_CustomerLocations)
        /// </summary>
        public System.Collections.Generic.ICollection<CustomerLocationAddress> CustomerLocationAddresses { get; set; } // CustomerLocationAddresses.FK_CustomerLocationAddresses_CustomerLocations
        /// <summary>
        /// Child Documents (Many-to-Many) mapped by table [CustomerLocationDocuments]
        /// </summary>
        public System.Collections.Generic.ICollection<Document> Documents { get; set; } // Many to many mapping
        /// <summary>
        /// Child LocationServices where [LocationServices].[CustomerLocationId] point to this entity (FK_LocationServices_CustomerLocations)
        /// </summary>
        public System.Collections.Generic.ICollection<LocationService> LocationServices { get; set; } // LocationServices.FK_LocationServices_CustomerLocations

        // Foreign keys

        /// <summary>
        /// Parent Address pointed by [CustomerLocations].([AddressId]) (FK_CustomerLocations_Addresses)
        /// </summary>
        [ForeignKey("AddressId")] public Address Address { get; set; } // FK_CustomerLocations_Addresses

        /// <summary>
        /// Parent Customer pointed by [CustomerLocations].([CustomerId]) (FK_CustomerLocations_Customers)
        /// </summary>
        [ForeignKey("CustomerId")] public Customer Customer { get; set; } // FK_CustomerLocations_Customers

        /// <summary>
        /// Parent ServiceArea pointed by [CustomerLocations].([ServiceAreaId]) (FK_CustomerLocations_ServiceArea)
        /// </summary>
        [ForeignKey("ServiceAreaId")] public ServiceArea ServiceArea { get; set; } // FK_CustomerLocations_ServiceArea

        public CustomerLocation()
        {
            LocationServices = new System.Collections.Generic.List<LocationService>();
            CustomerLocationAddresses = new System.Collections.Generic.List<CustomerLocationAddress>();
            Documents = new System.Collections.Generic.List<Document>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
