// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using TrackerEnabledDbContext;

    // AuthUsers
    [Table("AuthUsers", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class AuthUser: Entity
    {
        // AuthUser

        ///<summary>
        /// Username can be email or other.
        ///</summary>
        [Column(@"Username", Order = 2, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [DataType(DataType.Text)]
        [Display(Name = "Username")]
        public string Username { get; set; } // Username (length: 50)

        [Column(@"Password", Order = 3, TypeName = "varbinary")]
        [MaxLength(64)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public byte[] Password { get; set; } // Password (length: 64)

        [Column(@"Salt", Order = 4, TypeName = "varbinary")]
        [MaxLength(64)]
        [Display(Name = "Salt")]
        public byte[] Salt { get; set; } // Salt (length: 64)

        [Column(@"ResetKey", Order = 5, TypeName = "varbinary")]
        [MaxLength(64)]
        [Display(Name = "Reset key")]
        public byte[] ResetKey { get; set; } // ResetKey (length: 64)

        [Column(@"ResetKeyExpirationUtc", Order = 6, TypeName = "datetime")]
        [Display(Name = "Reset key expiration utc")]
        public System.DateTime ResetKeyExpirationUtc { get; set; } // ResetKeyExpirationUtc

        ///<summary>
        /// FK:UserRole
        ///</summary>
        [Column(@"RoleId", Order = 7, TypeName = "int")]
        [Display(Name = "Role ID")]
        public int RoleId { get; set; } // RoleId

        [Column(@"HasAccess", Order = 8, TypeName = "bit")]
        [Display(Name = "Has access")]
        public bool HasAccess { get; set; } // HasAccess

        [Column(@"IsEditable", Order = 9, TypeName = "bit")]
        [Display(Name = "Is editable")]
        public bool IsEditable { get; set; } // IsEditable

        // Reverse navigation

        /// <summary>
        /// Child AuthTokens where [AuthTokens].[AuthUserId] point to this entity (FK_AuthTokens_AuthUsers)
        /// </summary>
        public System.Collections.Generic.ICollection<AuthToken> AuthTokens { get; set; } // AuthTokens.FK_AuthTokens_AuthUsers
        /// <summary>
        /// Child Users where [Users].[AuthUserId] point to this entity (FK_Users_AuthUsers)
        /// </summary>
        public System.Collections.Generic.ICollection<User> Users { get; set; } // Users.FK_Users_AuthUsers

        // Foreign keys

        /// <summary>
        /// Parent UserRole pointed by [AuthUsers].([RoleId]) (FK_AuthUsers_UserRoles)
        /// </summary>
        [ForeignKey("RoleId")] public UserRole UserRole { get; set; } // FK_AuthUsers_UserRoles

        public AuthUser()
        {
            ResetKeyExpirationUtc = System.DateTime.UtcNow;
            HasAccess = true;
            IsEditable = true;
            Users = new System.Collections.Generic.List<User>();
            AuthTokens = new System.Collections.Generic.List<AuthToken>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
