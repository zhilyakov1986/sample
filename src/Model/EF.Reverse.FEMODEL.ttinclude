<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="System.Security.Cryptography" #>
<#@ import namespace="System.Security.Cryptography.X509Certificates" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="$(SolutionDir)\src\Model\bin\Debug\Newtonsoft.Json.dll" #>
<#

  fileManager2.StartHeader();
// Copyright (C) Miles Technologies 2017
// v0.0.1
#>
// Copyright (C) Miles Technologies 2017
// v0.0.1
// <auto-generated/>
// THIS FILE IS AUTOGENERATED DO NOT CHANGE ANYTHING
// IT WILL BE OVERWRITTEN WHEN THE NEXT MODEL GENERATION
// IS TRIGGERED.

<#
    fileManager2.StartNewFile("BackEndModel.json" );
 #>

 {

 <#= GetBaseBody() #>
 <#
 // Jamil this "THIS" is ugly nvm the rest of the template
  //var count = 0;
  foreach(Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping).OrderBy(x => x.NameHumanCase) select t) {
   //count++;
      if(tbl.NameHumanCase != "RefactorLog") {
      // No need to generate RefactorLog class on front end
 #>
      <#=  GetJsonBody(tbl.NameHumanCase, tbl)#>

 <#   }
   } #>

 }
<# fileManager2.StartFooter(); #>


<# fileManager2.EndBlock();
if(Settings.GenerateSeparateFiles)
  fileManager2.Process(); #>

<#
// Utility Functions

  string GetSolutionDirectory()
  {

    var serviceProvider = this.Host as IServiceProvider;
    var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
    return Path.Combine(System.IO.Path.GetDirectoryName(dte.Solution.FullName));

  }


  string GetBaseBody() {

    var res = JObject.Parse(
                    File.ReadAllText(
                        GetSolutionDirectory() + @"\src\model\FEBaseGenerator.json" )
                           );
    return "\"model\":" + res;

  }


  string GetJsonBody(string name, Table tbl) {

  // Child Arrays
  var extVals = new JArray();
  var props = new JArray();
  var reverseNavArray = new JArray();
  var fkArray = new JArray();
  var isModule = false;

  // Limiting columns to only "Id" when PrimaryKey and any nonhidden columns
  foreach (Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(x => (x.Name.ToLower() == "id" && x.IsPrimaryKey) || !x.Hidden)) {
    // check if this is a module level table
    if (col.Name.ToLower() == "id" && col.ExtendedProperty != null && col.ExtendedProperty.ToLower().Contains("module")) {
      isModule = true;
    }

    // Right now I'm not writing the PK column.
    if (!(col.Name.ToLower() == "id" && col.IsPrimaryKey)) {
      // We don't want the version column that comes from base
      if (col.Name.ToLower() != "version")
        props.Add(GetColumnObject(col));
    }
    // Everything that isn't a mapping table has entity
    else {
      extVals.Add(new JValue("Entity"));
    }
    // If it has version it will be flagged versionable
    if (col.IsRowVersion)
      extVals.Add(new JValue("Versionable"));
    }

    // Load up the Foreign Keys
    foreach (var entityFk in tbl.Columns.SelectMany(x => x.EntityFkBasicName).OrderBy(o => o)) {
      //fkArray.Add(new JValue(entityFk.Item1 + " - " + entityFk.Item2));
        fkArray.Add(new JObject(
                        new JProperty("name", entityFk.Item2),
                        new JProperty("type", entityFk.Item1)
                        )
                    );
    }

    // I'm doing some substring logic that may seem like it maks no sense but
    // this list has all the properties so I need to just pull out the ones
    // with class definitions.
    // TODO: Refactor the Core file to load this for me similar to how I added EntityFkBasicName
    foreach (PropertyAndComments rn in tbl.ReverseNavigationProperty.OrderBy(x => x.Definition)) {

      // Get the text in the class definition
      var pFrom = rn.Definition.IndexOf("<") + "<".Length;
      // Ignore the properties that don't have a class definition.
      // These would just be normal columns
      if (pFrom <= -1) continue;

      // Get the basic name
      var pTo = rn.Definition.LastIndexOf(">");
      var result = rn.Definition.Substring(pFrom, pTo - pFrom);

      reverseNavArray.Add(new JValue(result));
    }

    // LAS: Removing Duplicates here to prevent duplicate fields on front end
    // this stemmed from Users having Documents and Documents_UploadedBy
    var removedDupesFromReverseNav = reverseNavArray.Distinct().ToList();

    // Combine all the child arrays
    var res =
      new JObject(
        new JProperty(name,
            new JObject(
              new JProperty("name", name),
              new JProperty("module", isModule),
              new JProperty("extends", extVals),
              new JProperty("properties",
                props
              ),
              new JProperty("reverseNav", removedDupesFromReverseNav),
              new JProperty("foreignKeys", fkArray)
            )
         )
       );

    return ",\"" + name + "\":" + res ;

  }

  // Helper to get the object for the properties array
  // This is a bit more dynamic then the other objects
  JObject GetColumnObject(Column col) {
    var propObj =  new JObject(
      new JProperty("name", col.Name),
      new JProperty("type", col.PropertyType)
      );

      if (ShouldIncludeScale(col))
        propObj.Add(new JProperty("scale", col.Scale));
      if (col.Default != "")
        propObj.Add(new JProperty("default", col.Default));
      if (col.IsNullable)
        propObj.Add(new JProperty("nullable", "true"));
      if (col.MaxLength > 0)
        propObj.Add(new JProperty("maxLength", col.MaxLength.ToString()));

    // check if there is FK override at the column level
    if (col.ExtendedProperty != null && col.ExtendedProperty.ToLower().Contains("fk:")) {
      var fkOverride = col.ExtendedProperty.TrimStart("FK:".ToCharArray());
      propObj.Add(new JProperty("foreignKeyOverride", fkOverride));
    }

    var ret = propObj;

    return ret;

  }

  bool ShouldIncludeScale(Column col) {
    if (col.PropertyType == "decimal" || col.PropertyType == "double") {
        return true;
    } else {
        return false;
    }
  }


  #>

