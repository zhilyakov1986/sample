// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using TrackerEnabledDbContext;

    // Goods
    [Table("Goods", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class Good: Entity, IVersionable
    {
        // Good

        [Column(@"Name", Order = 2, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        [Column(@"ServiceDivisionId", Order = 3, TypeName = "int")]
        [Display(Name = "Service division ID")]
        public int ServiceDivisionId { get; set; } // ServiceDivisionId

        [Column(@"ServiceTypeId", Order = 4, TypeName = "int")]
        [Display(Name = "Service type ID")]
        public int ServiceTypeId { get; set; } // ServiceTypeId

        [Column(@"ServiceShortDescription", Order = 5, TypeName = "varchar")]
        [MaxLength(250)]
        [StringLength(250)]
        [Display(Name = "Service short description")]
        public string ServiceShortDescription { get; set; } // ServiceShortDescription (length: 250)

        [Column(@"ServiceLongDescription", Order = 6, TypeName = "varchar(max)")]
        [Display(Name = "Service long description")]
        public string ServiceLongDescription { get; set; } // ServiceLongDescription

        [Column(@"UnitTypeId", Order = 7, TypeName = "int")]
        [Display(Name = "Unit type ID")]
        public int UnitTypeId { get; set; } // UnitTypeId

        [Column(@"Cost", Order = 8, TypeName = "money")]
        [Display(Name = "Cost")]
        public decimal Cost { get; set; } // Cost

        [Column(@"Price", Order = 9, TypeName = "money")]
        [Display(Name = "Price")]
        public decimal Price { get; set; } // Price

        [Column(@"Taxable", Order = 10, TypeName = "bit")]
        [Display(Name = "Taxable")]
        public bool Taxable { get; set; } // Taxable

        [Column(@"Archived", Order = 11, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"Version", Order = 12, TypeName = "timestamp")]
        [MaxLength(8)]
        [Timestamp]
        [Display(Name = "Version")]
        public byte[] Version { get; set; } // Version (length: 8)

        // Reverse navigation

        /// <summary>
        /// Child Documents (Many-to-Many) mapped by table [GoodDocuments]
        /// </summary>
        public System.Collections.Generic.ICollection<Document> Documents { get; set; } // Many to many mapping
        /// <summary>
        /// Child LocationServices where [LocationServices].[GoodId] point to this entity (FK_LocationServices_Goods)
        /// </summary>
        public System.Collections.Generic.ICollection<LocationService> LocationServices { get; set; } // LocationServices.FK_LocationServices_Goods

        // Foreign keys

        /// <summary>
        /// Parent ServiceDivision pointed by [Goods].([ServiceDivisionId]) (FK_Goods_ServiceDivisions)
        /// </summary>
        [ForeignKey("ServiceDivisionId")] public ServiceDivision ServiceDivision { get; set; } // FK_Goods_ServiceDivisions

        /// <summary>
        /// Parent ServiceType pointed by [Goods].([ServiceTypeId]) (FK_Goods_ServiceTypes)
        /// </summary>
        [ForeignKey("ServiceTypeId")] public ServiceType ServiceType { get; set; } // FK_Goods_ServiceTypes

        /// <summary>
        /// Parent UnitType pointed by [Goods].([UnitTypeId]) (FK_Goods_UnitTypes)
        /// </summary>
        [ForeignKey("UnitTypeId")] public UnitType UnitType { get; set; } // FK_Goods_UnitTypes

        public Good()
        {
            LocationServices = new System.Collections.Generic.List<LocationService>();
            Documents = new System.Collections.Generic.List<Document>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
