// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using TrackerEnabledDbContext;

    // Addresses
    [Table("Addresses", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class Address: Entity, IAddress
    {
        // Address

        [Column(@"Address1", Order = 2, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Address 1")]
        public string Address1 { get; set; } // Address1 (length: 50)

        [Column(@"Address2", Order = 3, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Address 2")]
        public string Address2 { get; set; } // Address2 (length: 50)

        [Column(@"City", Order = 4, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "City")]
        public string City { get; set; } // City (length: 50)

        [Column(@"StateId", Order = 5, TypeName = "int")]
        [Display(Name = "State ID")]
        public int? StateId { get; set; } // StateId

        [Column(@"Zip", Order = 6, TypeName = "nvarchar")]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "Zip")]
        public string Zip { get; set; } // Zip (length: 20)

        [Column(@"CountryCode", Order = 7, TypeName = "char")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Country code")]
        public string CountryCode { get; set; } // CountryCode (length: 2)

        [Column(@"Province", Order = 8, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Province")]
        public string Province { get; set; } // Province (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Contacts where [Contacts].[AddressId] point to this entity (FK_Contacts_Addresses)
        /// </summary>
        public System.Collections.Generic.ICollection<Contact> Contacts { get; set; } // Contacts.FK_Contacts_Addresses
        /// <summary>
        /// Child CustomerAddresses where [CustomerAddresses].[AddressId] point to this entity (FK_CustomerAddresses_Addresses)
        /// </summary>
        public System.Collections.Generic.ICollection<CustomerAddress> CustomerAddresses { get; set; } // CustomerAddresses.FK_CustomerAddresses_Addresses
        /// <summary>
        /// Child CustomerLocations where [CustomerLocations].[AddressId] point to this entity (FK_CustomerLocations_Addresses)
        /// </summary>
        public System.Collections.Generic.ICollection<CustomerLocation> CustomerLocations { get; set; } // CustomerLocations.FK_CustomerLocations_Addresses
        /// <summary>
        /// Child CustomerLocationAddresses where [CustomerLocationAddresses].[AddressId] point to this entity (FK_CustomerLocationAddresses_Addresses)
        /// </summary>
        public System.Collections.Generic.ICollection<CustomerLocationAddress> CustomerLocationAddresses { get; set; } // CustomerLocationAddresses.FK_CustomerLocationAddresses_Addresses
        /// <summary>
        /// Child Users where [Users].[AddressId] point to this entity (FK_Users_Addresses)
        /// </summary>
        public System.Collections.Generic.ICollection<User> Users { get; set; } // Users.FK_Users_Addresses

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [Addresses].([CountryCode]) (FK_Addresses_Countries)
        /// </summary>
        [ForeignKey("CountryCode")] public Country Country { get; set; } // FK_Addresses_Countries

        /// <summary>
        /// Parent State pointed by [Addresses].([StateId]) (FK_Addresses_States)
        /// </summary>
        [ForeignKey("StateId")] public State State { get; set; } // FK_Addresses_States

        public Address()
        {
            Address1 = "";
            Address2 = "";
            City = "";
            Zip = "";
            Province = "";
            Users = new System.Collections.Generic.List<User>();
            CustomerLocations = new System.Collections.Generic.List<CustomerLocation>();
            CustomerLocationAddresses = new System.Collections.Generic.List<CustomerLocationAddress>();
            Contacts = new System.Collections.Generic.List<Contact>();
            CustomerAddresses = new System.Collections.Generic.List<CustomerAddress>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
