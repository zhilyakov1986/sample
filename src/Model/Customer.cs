// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using TrackerEnabledDbContext;

    // Customers
    [Table("Customers", Schema = "dbo")]
    [TrackChanges]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class Customer: Entity, IVersionable
    {
        // Customer

        [Column(@"Name", Order = 2, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        [Column(@"StatusId", Order = 3, TypeName = "int")]
        [Display(Name = "Status ID")]
        public int StatusId { get; set; } // StatusId

        [Column(@"SourceId", Order = 4, TypeName = "int")]
        [Display(Name = "Source ID")]
        public int SourceId { get; set; } // SourceId

        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"Version", Order = 5, TypeName = "timestamp")]
        [MaxLength(8)]
        [Timestamp]
        [Display(Name = "Version")]
        public byte[] Version { get; set; } // Version (length: 8)

        // Reverse navigation

        /// <summary>
        /// Child Contacts (Many-to-Many) mapped by table [CustomerContacts]
        /// </summary>
        public System.Collections.Generic.ICollection<Contact> Contacts { get; set; } // Many to many mapping
        /// <summary>
        /// Child Contracts where [Contracts].[CustomerId] point to this entity (FK_Contracts_Customers)
        /// </summary>
        public System.Collections.Generic.ICollection<Contract> Contracts { get; set; } // Contracts.FK_Contracts_Customers
        /// <summary>
        /// Child CustomerAddresses where [CustomerAddresses].[CustomerId] point to this entity (FK_CustomerAddresses_Customers)
        /// </summary>
        public System.Collections.Generic.ICollection<CustomerAddress> CustomerAddresses { get; set; } // CustomerAddresses.FK_CustomerAddresses_Customers
        /// <summary>
        /// Child CustomerLocations where [CustomerLocations].[CustomerId] point to this entity (FK_CustomerLocations_Customers)
        /// </summary>
        public System.Collections.Generic.ICollection<CustomerLocation> CustomerLocations { get; set; } // CustomerLocations.FK_CustomerLocations_Customers
        /// <summary>
        /// Child CustomerPhones where [CustomerPhones].[CustomerId] point to this entity (FK_CustomerPhones_Customers)
        /// </summary>
        public System.Collections.Generic.ICollection<CustomerPhone> CustomerPhones { get; set; } // CustomerPhones.FK_CustomerPhones_Customers
        /// <summary>
        /// Child Documents (Many-to-Many) mapped by table [CustomerDocuments]
        /// </summary>
        public System.Collections.Generic.ICollection<Document> Documents { get; set; } // Many to many mapping
        /// <summary>
        /// Child Notes (Many-to-Many) mapped by table [CustomerNotes]
        /// </summary>
        public System.Collections.Generic.ICollection<Note> Notes { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent CustomerSource pointed by [Customers].([SourceId]) (FK_Customers_CustomerSources)
        /// </summary>
        [ForeignKey("SourceId")] public CustomerSource CustomerSource { get; set; } // FK_Customers_CustomerSources

        /// <summary>
        /// Parent CustomerStatus pointed by [Customers].([StatusId]) (FK_Customers_CustomerStatuses)
        /// </summary>
        [ForeignKey("StatusId")] public CustomerStatus CustomerStatus { get; set; } // FK_Customers_CustomerStatuses

        public Customer()
        {
            Contracts = new System.Collections.Generic.List<Contract>();
            CustomerLocations = new System.Collections.Generic.List<CustomerLocation>();
            CustomerAddresses = new System.Collections.Generic.List<CustomerAddress>();
            CustomerPhones = new System.Collections.Generic.List<CustomerPhone>();
            Contacts = new System.Collections.Generic.List<Contact>();
            Documents = new System.Collections.Generic.List<Document>();
            Notes = new System.Collections.Generic.List<Note>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
