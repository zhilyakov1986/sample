// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using TrackerEnabledDbContext;

    // AuthClients
    [Table("AuthClients", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class AuthClient: Entity
    {
        // AuthClient

        [Column(@"Name", Order = 2, TypeName = "varchar")]
        [MaxLength(200)]
        [StringLength(200)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 200)

        [Column(@"Secret", Order = 3, TypeName = "varbinary(max)")]
        [Display(Name = "Secret")]
        public byte[] Secret { get; set; } // Secret

        [Column(@"Salt", Order = 4, TypeName = "varbinary(max)")]
        [Display(Name = "Salt")]
        public byte[] Salt { get; set; } // Salt

        [Column(@"Description", Order = 5, TypeName = "varchar")]
        [MaxLength(200)]
        [StringLength(200)]
        [Display(Name = "Description")]
        public string Description { get; set; } // Description (length: 200)

        [Column(@"AuthApplicationTypeId", Order = 6, TypeName = "int")]
        [Display(Name = "Auth application type ID")]
        public int AuthApplicationTypeId { get; set; } // AuthApplicationTypeId

        [Column(@"RefreshTokenMinutes", Order = 7, TypeName = "int")]
        [Display(Name = "Refresh token minutes")]
        public int RefreshTokenMinutes { get; set; } // RefreshTokenMinutes

        [Column(@"AllowedOrigin", Order = 8, TypeName = "varchar")]
        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "Allowed origin")]
        public string AllowedOrigin { get; set; } // AllowedOrigin (length: 500)

        // Reverse navigation

        /// <summary>
        /// Child AuthTokens where [AuthTokens].[AuthClientId] point to this entity (FK_AuthTokens_AuthClients)
        /// </summary>
        public System.Collections.Generic.ICollection<AuthToken> AuthTokens { get; set; } // AuthTokens.FK_AuthTokens_AuthClients

        // Foreign keys

        /// <summary>
        /// Parent AuthApplicationType pointed by [AuthClients].([AuthApplicationTypeId]) (FK_AuthClients_AuthApplicationTypes)
        /// </summary>
        [ForeignKey("AuthApplicationTypeId")] public AuthApplicationType AuthApplicationType { get; set; } // FK_AuthClients_AuthApplicationTypes

        public AuthClient()
        {
            AuthTokens = new System.Collections.Generic.List<AuthToken>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
